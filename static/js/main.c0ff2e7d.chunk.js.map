{"version":3,"sources":["components/Filter/FilterStyle.module.css","components/AppStyles.module.css","components/ContactForm/ContactFormStyles.module.css","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/App.js","services/localStorage.js","index.js","components/ContactList/ContactListStyles.module.css"],"names":["module","exports","Filter","value","onChangeFilter","className","styles","filterContainer","filterInput","type","onChange","e","target","contactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","key","nameInputId","shortid","generate","numberInputId","form","preventDefault","label","htmlFor","pattern","title","required","id","formInput","formButton","ContactList","contacts","onRemoveContact","map","list","onClick","listBtn","STORAGE_KEY","App","setContacts","filter","setFilter","useEffect","savedContacts","JSON","parse","localStorage","getItem","error","storage","setItem","stringify","filterContacts","normalizeFilter","toLowerCase","contact","includes","ContactForm","newName","some","alert","prevContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,YAAc,mC,mBCAvFD,EAAOC,QAAU,CAAC,YAAc,iC,kBCAhCD,EAAOC,QAAU,CAAC,MAAQ,iCAAiC,KAAO,gCAAgC,UAAY,qCAAqC,WAAa,wC,mICEjJ,SAASC,EAAT,GAA4C,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,eACtC,OACE,sBAAKC,UAAWC,IAAOC,gBAAvB,kCAEE,uBACEF,UAAWC,IAAOE,YAClBC,KAAK,OACLN,MAAOA,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAeO,EAAEC,OAAOT,a,oBCsDlCU,EA7DK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAErB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAACC,EAAKlB,GACb,SAARkB,GACFJ,EAAQd,GAEE,WAARkB,GACFF,EAAUhB,IAURmB,EAAcC,IAAQC,WACtBC,EAAgBF,IAAQC,WAC9B,OACE,uBAAMnB,UAAWC,IAAOoB,KAAMZ,SATX,SAACH,GACpBA,EAAEgB,iBACFb,EAAS,CAAEE,OAAME,WACjBD,EAAQ,IACRE,EAAU,KAKV,UACE,2CACA,wBAAOd,UAAWC,IAAOsB,MAAOC,QAASP,EAAzC,iBAEE,uBACEb,KAAK,OACLO,KAAK,OACLc,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACR7B,MAAOa,EACPN,SAAU,SAACC,GAAD,OAAOS,EAAaT,EAAEC,OAAOI,KAAML,EAAEC,OAAOT,QACtD8B,GAAIX,EACJjB,UAAWC,IAAO4B,eAGtB,wBAAO7B,UAAWC,IAAOsB,MAAOC,QAASJ,EAAzC,mBAEE,uBACEhB,KAAK,MACLO,KAAK,SACLc,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACR7B,MAAOe,EACPR,SAAU,SAACC,GAAD,OAAOS,EAAaT,EAAEC,OAAOI,KAAML,EAAEC,OAAOT,QACtD8B,GAAIR,EACJpB,UAAWC,IAAO4B,eAGtB,wBAAQ7B,UAAWC,IAAO6B,WAAY1B,KAAK,SAA3C,6B,gBCvBS2B,EAhCK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAC/B,OACE,oBAAIjC,UAAWC,IAAO+B,SAAtB,SACGA,EAASE,KAAI,gBAAGvB,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQe,EAAjB,EAAiBA,GAAjB,OACZ,qBAAa5B,UAAWC,IAAOkC,KAA/B,UACGxB,EADH,MACYE,EAER,wBACET,KAAK,SACLO,KAAK,SACLyB,QAAS,kBAAMH,EAAgBL,IAC/B5B,UAAWC,IAAOoC,QAJpB,sBAHKT,S,iBCCXU,EAAc,WAsELC,EApEH,WACV,MAAgC7B,mBAAS,CACvC,CAAEkB,GAAI,OAAQjB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEe,GAAI,OAAQjB,KAAM,iBAAkBE,OAAQ,aAC9C,CAAEe,GAAI,OAAQjB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEe,GAAI,OAAQjB,KAAM,iBAAkBE,OAAQ,eAJhD,mBAAOmB,EAAP,KAAiBQ,EAAjB,KAOA,EAA4B9B,mBAAS,IAArC,mBAAO+B,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,ECbE,SAAC5B,GACX,IACE,OAAO6B,KAAKC,MAAMC,aAAaC,QAAQhC,IACvC,MAAOiC,GACP,OAAO,MDSeC,CAAYZ,GAC9BM,GACFJ,EAAY,YAAII,MAEjB,IAEHD,qBAAU,kBC3BC,SAAC3B,EAAKlB,GACjB,IACEiD,aAAaI,QAAQnC,EAAK6B,KAAKO,UAAUtD,IACzC,MAAOmD,GACP,OAAO,MDuBOC,CAAaZ,EAAaN,KAAW,CAACA,IAEtD,IAgBMqB,EAAiB,WACrB,IAAMC,EAAkBb,EAAOc,cAC/B,OAAOvB,EAASS,QAAO,SAACe,GAAD,OACrBA,EAAQ7C,KAAK4C,cAAcE,SAASH,OAWxC,OACE,qCACE,cAACI,EAAD,CAAajD,SAhCI,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAEtB8C,EAAU,CACd/B,GAFgBV,IAAQC,WAGxBR,OACAE,UAKF,GAHuBmB,EAAS4B,MAC9B,SAACJ,GAAD,OAAaA,EAAQ7C,KAAK4C,gBAAkBI,EAAQhD,KAAK4C,iBAGzD,OAAOM,MAAM,GAAD,OAAIlD,EAAJ,2BAEd6B,EAAY,CAACmB,GAAF,mBAAc3B,QAoBvB,oBAAIhC,UAAWC,IAAOO,YAAtB,sBACA,cAACX,EAAD,CAAQC,MAAO2C,EAAQ1C,eAXN,SAACO,GAAD,OAAOoC,EAAUpC,EAAEC,OAAOT,UAY1CuD,IACC,cAAC,EAAD,CACErB,SAAUqB,IACVpB,gBAbc,SAACL,GAAD,OACpBY,GAAY,SAACsB,GAAD,OACVA,EAAarB,QAAO,SAACe,GAAD,OAAaA,EAAQ5B,KAAOA,WAc9C,mBAAG5B,UAAWC,IAAOO,YAArB,6DElERuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCP1BxE,EAAOC,QAAU,CAAC,KAAO,gCAAgC,SAAW,oCAAoC,QAAU,sC","file":"static/js/main.c0ff2e7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"FilterStyle_filterContainer__30Dmy\",\"filterInput\":\"FilterStyle_filterInput__lbIJM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"AppStyles_contactForm__32mX0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactFormStyles_label__3hAdf\",\"form\":\"ContactFormStyles_form__374zd\",\"formInput\":\"ContactFormStyles_formInput__EJJjQ\",\"formButton\":\"ContactFormStyles_formButton__1j65B\"};","import PropTypes from \"prop-types\";\nimport styles from \"./FilterStyle.module.css\";\n\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <div className={styles.filterContainer}>\n      Find contacts by name\n      <input\n        className={styles.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={(e) => onChangeFilter(e.target.value)}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","import { useState } from \"react\";\nimport shortid from \"shortid\";\nimport styles from \"./ContactFormStyles.module.css\";\n\nconst contactForm = ({ onSubmit }) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [name, setName] = useState(\"\");\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (key, value) => {\n    if (key === \"name\") {\n      setName(value);\n    }\n    if (key === \"number\") {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setName(\"\");\n    setNumber(\"\");\n  };\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <h1>PhoneBook</h1>\n      <label className={styles.label} htmlFor={nameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={(e) => handleChange(e.target.name, e.target.value)}\n          id={nameInputId}\n          className={styles.formInput}\n        />\n      </label>\n      <label className={styles.label} htmlFor={numberInputId}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={(e) => handleChange(e.target.name, e.target.value)}\n          id={numberInputId}\n          className={styles.formInput}\n        />\n      </label>\n      <button className={styles.formButton} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default contactForm;\n// export default class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handleChange = (event) => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   render() {\n//     return (\n//       <form className={styles.form} onSubmit={this.handleSubmit}>\n//         <h1>PhoneBook</h1>\n//         <label className={styles.label} htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={this.state.name}\n//             onInput={this.handleChange}\n//             id={this.nameInputId}\n//             className={styles.formInput}\n//           />\n//         </label>\n//         <label className={styles.label} htmlFor={this.numberInputId}>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//             id={this.numberInputId}\n//             className={styles.formInput}\n//           />\n//         </label>\n//         <button className={styles.formButton} type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import PropTypes from \"prop-types\";\nimport styles from \"./ContactListStyles.module.css\";\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n  return (\n    <ul className={styles.contacts}>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={styles.list}>\n          {name} : {number}\n          {\n            <button\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => onRemoveContact(id)}\n              className={styles.listBtn}\n            >\n              delete\n            </button>\n          }\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport Filter from \"./Filter/Filter\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport * as storage from \"../services/localStorage\";\nimport styles from \"../components/AppStyles.module.css\";\n\nconst STORAGE_KEY = \"contacts\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  ]);\n\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const savedContacts = storage.get(STORAGE_KEY);\n    if (savedContacts) {\n      setContacts([...savedContacts]);\n    }\n  }, []);\n\n  useEffect(() => storage.save(STORAGE_KEY, contacts), [contacts]);\n\n  const onSubmitName = ({ name, number }) => {\n    const contactId = shortid.generate();\n    const newName = {\n      id: contactId,\n      name,\n      number,\n    };\n    const compareContact = contacts.some(\n      (contact) => contact.name.toLowerCase() === newName.name.toLowerCase()\n    );\n    if (compareContact) {\n      return alert(`${name} is alredy in contacts`);\n    }\n    setContacts([newName, ...contacts]);\n  };\n\n  const filterContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const changeFilter = (e) => setFilter(e.target.value);\n\n  const removeContact = (id) =>\n    setContacts((prevContacts) =>\n      prevContacts.filter((contact) => contact.id !== id)\n    );\n\n  return (\n    <>\n      <ContactForm onSubmit={onSubmitName} />\n      <h2 className={styles.contactForm}>Contacts</h2>\n      <Filter value={filter} onChangeFilter={changeFilter} />\n      {filterContacts() ? (\n        <ContactList\n          contacts={filterContacts()}\n          onRemoveContact={removeContact}\n        />\n      ) : (\n        <p className={styles.contactForm}>\n          Nothing found. Add contact or clear filter.\n        </p>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const save = (key, value) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst get = (key) => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst remove = (key) => {\r\n  try {\r\n    return localStorage.removeItem(key);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { get, save, remove };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactListStyles_list__3vOEb\",\"contacts\":\"ContactListStyles_contacts__3h-Fn\",\"listBtn\":\"ContactListStyles_listBtn__1RMWL\"};"],"sourceRoot":""}